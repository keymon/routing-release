---
status:
  port: <%= p("router.status.port") %>
  user: <%= p("router.status.user") %>
  pass: <%= p("router.status.password") %>

<%
  nats_machines = nil
  if_p('nats.machines') do |ips|
    nats_machines = ips.compact
  end.else do
    nats_machines = link('nats').instances.map { |instance| instance.address }
  end

  nats_port = nil
  if_p('nats.port') do |prop|
    nats_port = prop
  end.else do
    nats_port = link('nats').p("nats.port")
  end

  nats_user = nil
  if_p('nats.user') do |prop|
    nats_user = prop
  end.else do
    nats_user = link('nats').p("nats.user")
  end

  nats_password = nil
  if_p('nats.password') do |prop|
    nats_password = prop
  end.else do
    nats_password = link('nats').p("nats.password")
  end
%>
nats:
<% nats_machines.each do |address| %>
  - host: <%= address %>
    port: <%= nats_port %>
    user: <%= nats_user %>
    pass: "<%= nats_password %>"
<% end %>

logging:
  syslog: vcap.gorouter
  level: <%= p("router.logging_level") %>
  loggregator_enabled: true
  metron_address: "localhost:<%=p("metron.port") %>"
  disable_log_forwarded_for: <%= p("router.disable_log_forwarded_for") %>
  disable_log_source_ip: <%= p("router.disable_log_source_ip") %>

tracing:
  enable_zipkin: <%= p("router.tracing.enable_zipkin") %>

port: <%= p("router.port") %>
index: <%= p("router.offset") + spec.index %>
go_max_procs: <%= p("router.number_of_cpus") %>
trace_key: <%= p("router.trace_key") %>
debug_addr: <%= p("router.debug_address") %>
secure_cookies: <%= p("router.secure_cookies") %>

access_log:
  file: <%= p("router.write_access_logs_locally") ? "/var/vcap/sys/log/gorouter/access.log" : "" %>

publish_start_message_interval: 30s
prune_stale_droplets_interval: 30s
droplet_stale_threshold: 120s
publish_active_apps_interval: 0s # 0 means disabled
suspend_pruning_if_nats_unavailable: <%= p("router.suspend_pruning_if_nats_unavailable") %>
route_latency_metric_muzzle_duration: 30s

<% if p("router.max_idle_connections") && p("router.max_idle_connections") > 0 %>
disable_keep_alives: false
max_idle_conns: <%= p("router.max_idle_connections") %>
max_idle_conns_per_host: 100
<% else %>
disable_keep_alives: true
<% end%>

frontend_idle_timeout: <%= p("router.frontend_idle_timeout") %>s

<%=
  backend_cert_chain = ''
  backend_private_key = ''
  if_p("router.backends.cert_chain") { |val| backend_cert_chain = val }
  if_p("router.backends.private_key") { |val| backend_private_key = val }

  if (backend_cert_chain != '') ^ (backend_private_key != '')
    raise 'backends.cert_chain and backends.private_key must be both provided or not at all'
  end

  backends = {
    "max_conns" => p("router.backends.max_conns"),
    "cert_chain" => backend_cert_chain,
    "private_key" => backend_private_key,
  }

  { "backends" => backends }.to_yaml[3..-1]
%>

oauth:
  token_endpoint: <%= p("uaa.token_endpoint") %>
  client_name: "gorouter"
  client_secret: <%= p("uaa.clients.gorouter.secret") %>
  port: <%= p("uaa.ssl.port") %>
  skip_ssl_validation: <%= p("router.ssl_skip_validation") %>
  <% if p("uaa.ca_cert") != "" %>
  ca_certs: "/var/vcap/jobs/gorouter/config/certs/uaa/ca.crt"
  <% end %>

<% if p("routing_api.enabled") %>
routing_api:
  uri: <%= p("routing_api.uri") %>
  port: <%= p("routing_api.port") %>
  auth_disabled: <%= p("routing_api.auth_disabled") %>
<% end %>

drain_wait: <%= p("router.drain_wait") %>s
healthcheck_user_agent: <%= p("router.healthcheck_user_agent") %>
endpoint_timeout: <%= p("request_timeout_in_seconds") %>s

start_response_delay_interval: <%= p("router.requested_route_registration_interval_in_seconds") %>s
load_balancer_healthy_threshold: <%= p("router.load_balancer_healthy_threshold") %>s

balancing_algorithm: <%= p("router.balancing_algorithm") %>

enable_ssl: <%= p("router.enable_ssl") %>
<% if p("router.enable_ssl") %>
<%
  p("router.tls_pem").each { |cert_pair|
    if !cert_pair.is_a?(Hash) || !cert_pair.key?("cert_chain") || !cert_pair.key?("private_key")
      raise 'must provide cert_chain and private_key with tls_pem'
    end
  }
  tls_pem = { 'tls_pem' => p('router.tls_pem') }
%>
<%= tls_pem.to_yaml[3..-1] %>

<%
  allowed_client_cert_validations = ["none", "request", "require"]
  client_cert_validation = p("router.client_cert_validation")

  if !allowed_client_cert_validations.include?(client_cert_validation)
    raise 'router.client_cert_validation must be "none", "request", or "require"'
  end
%>
client_cert_validation: <%= client_cert_validation %>
min_tls_version: <%= p("router.min_tls_version") %>
ssl_port: <%= p("router.tls_port") %>
<% end %>

disable_http: <%= p("router.disable_http") %>

<% if p("router.ca_certs")
     ca_certs = p("router.ca_certs")
     if !ca_certs.is_a?(String)
       raise 'ca_certs must be provided as a single string block'
     end
%>
<%= { 'ca_certs' => ca_certs }.to_yaml[3..-1] %>
<% end %>

skip_ssl_validation: <%= p("router.ssl_skip_validation") %>
cipher_suites: <%= p("router.cipher_suites") %>
forwarded_client_cert: <%= p("router.forwarded_client_cert") %>

isolation_segments: <%= p("router.isolation_segments") %>
routing_table_sharding_mode: <%= p("router.routing_table_sharding_mode") %>

route_services_timeout: <%= p("router.route_services_timeout") %>s
route_services_secret: <%= p("router.route_services_secret") %>
route_services_secret_decrypt_only: <%= p("router.route_services_secret_decrypt_only") %>
route_services_recommend_https: <%= p("router.route_services_recommend_https") %>

extra_headers_to_log: <%= p("router.extra_headers_to_log") %>
token_fetcher_max_retries: 3
token_fetcher_retry_interval: 5s
token_fetcher_expiration_buffer_time: 30
enable_proxy: <%= p("router.enable_proxy") %>
force_forwarded_proto_https: <%= p("router.force_forwarded_proto_https") %>
sanitize_forwarded_proto: <%= p("router.sanitize_forwarded_proto") %>
<% if_p("router.strict_transport_security_header") do |h| %>
strict_transport_security_header: <%= h %>
<% end %>

pid_file: /var/vcap/sys/run/gorouter/gorouter.pid

ip_local_port_range: <%= p("router.ip_local_port_range") %>
